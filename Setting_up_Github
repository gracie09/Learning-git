(Completed in class.)

Go to

https://github.com

If you happen to have a Github account already, go ahead and log in.

For most of you, you will need to set up a Github account. You can use
any email adress you want for that. Choose a username you'll be happy
with in case you decide to use Github for future professional projects.
Also try to remember your password in the future!

When you get logged in, you may see a green button that says
"New repository". Click on that. (If you don't see that button, find a
link onscreen somewhere to your repositories. There should be a green "New"
button there.)

Under "Repository name", type

Learning-Git

Add a brief description. It doesn't really matter what you type, but maybe
something like "This is my first repo!"

Scrolling down, check the box to "Initialize this repository with a README".

Push the button to "Create repository".

Once inside your new repo, find the "Create new file" button. Name the file
"file.txt" and type one line of text in the body of the file. (It can be anything.)
At the bottom, click the green button to "Commit new file".

We're about to leave Github and go back to CoCalc, but before you go, copy
and paste the URL for your Github repository. It should have the form

  https://github.com/<username>/Learning-Git

where your username appears in place of <username>.

Now go over to CoCalc and open up our course project. Navigate to folder
Git/Git_tutorial_S18.

Open the terminal file called "git_tutorial.term". At the command prompt, type

  git clone <url>

where <url> should be replaced by the repo's url from Github.

Use ls to see that a new directory has been created called Learning-Git.
Go ahead and cd into that new directory. From here on, make sure that any
command you type starting with "git" is run from inside the Learning-Git
directory. If, for some reason, you leave that directory, be sure to come
back to it before you run any more git commands.

Type the following in order and observe the results:

  ls -a
    (Notice the hidden directory .git. This is where the git magic
    happens, but you should not mess with anything in that directory.)

  git config --global user.email "<email address>"
    (Obviously, you should replace <email address> with your own email address
    without the angle brackets.)
  git config --global user.name "<Name>"
    (Same goes for <Name>.)

  nano file.txt
    (This will bring up a simple text editor. You should see the
    text you typed in Github. Go ahead and add one more line of text
    to the file. Save with Control-O. Hit enter to confirm that
    you want to write to file.txt. Finally, hit Control-X to exit nano.)

  cat file.txt

  git status

  git add .

  git status

  git commit -m "Edit file.txt"

  git status

  git push -u origin master

  git status

Now go back to Github. (If you left it open in a tab in your web browser,
you may need to refresh the page.) Click on the file "file.txt" and see that
the changes you made in CoCalc have been "pushed" back to Github!
